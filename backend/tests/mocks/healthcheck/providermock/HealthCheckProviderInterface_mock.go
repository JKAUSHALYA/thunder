// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package providermock

import (
	"github.com/asgardeo/thunder/internal/system/healthcheck/service"
	mock "github.com/stretchr/testify/mock"
)

// NewHealthCheckProviderInterfaceMock creates a new instance of HealthCheckProviderInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHealthCheckProviderInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *HealthCheckProviderInterfaceMock {
	mock := &HealthCheckProviderInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// HealthCheckProviderInterfaceMock is an autogenerated mock type for the HealthCheckProviderInterface type
type HealthCheckProviderInterfaceMock struct {
	mock.Mock
}

type HealthCheckProviderInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *HealthCheckProviderInterfaceMock) EXPECT() *HealthCheckProviderInterfaceMock_Expecter {
	return &HealthCheckProviderInterfaceMock_Expecter{mock: &_m.Mock}
}

// GetHealthCheckService provides a mock function for the type HealthCheckProviderInterfaceMock
func (_mock *HealthCheckProviderInterfaceMock) GetHealthCheckService() service.HealthCheckServiceInterface {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHealthCheckService")
	}

	var r0 service.HealthCheckServiceInterface
	if returnFunc, ok := ret.Get(0).(func() service.HealthCheckServiceInterface); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.HealthCheckServiceInterface)
		}
	}
	return r0
}

// HealthCheckProviderInterfaceMock_GetHealthCheckService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHealthCheckService'
type HealthCheckProviderInterfaceMock_GetHealthCheckService_Call struct {
	*mock.Call
}

// GetHealthCheckService is a helper method to define mock.On call
func (_e *HealthCheckProviderInterfaceMock_Expecter) GetHealthCheckService() *HealthCheckProviderInterfaceMock_GetHealthCheckService_Call {
	return &HealthCheckProviderInterfaceMock_GetHealthCheckService_Call{Call: _e.mock.On("GetHealthCheckService")}
}

func (_c *HealthCheckProviderInterfaceMock_GetHealthCheckService_Call) Run(run func()) *HealthCheckProviderInterfaceMock_GetHealthCheckService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HealthCheckProviderInterfaceMock_GetHealthCheckService_Call) Return(healthCheckServiceInterface service.HealthCheckServiceInterface) *HealthCheckProviderInterfaceMock_GetHealthCheckService_Call {
	_c.Call.Return(healthCheckServiceInterface)
	return _c
}

func (_c *HealthCheckProviderInterfaceMock_GetHealthCheckService_Call) RunAndReturn(run func() service.HealthCheckServiceInterface) *HealthCheckProviderInterfaceMock_GetHealthCheckService_Call {
	_c.Call.Return(run)
	return _c
}
